{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","itemlist","deleteItem","OnEditChange","duration","easing","map","item","key","className","type","id","value","text","onChange","event","target","icon","onClick","library","add","faTrash","App","handleInputChange","setState","Date","now","addItem","preventDefault","state","prevState","listOfItems","Object","assign","push","keyToDelete","console","log","filteredItems","filter","items","onSubmit","this","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qTAoCeA,MA/Bf,SAAmBC,GACf,IAAMC,EAAWD,EAAMC,SACjBC,EAAaF,EAAME,WACnBC,EAAeH,EAAMG,aAO3B,OACI,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,eAExBJ,EAASK,KAAI,SAACC,GACV,OACI,yBAAKC,IAAKD,EAAKC,IAAKC,UAAU,QAC5B,2BACE,2BAAOC,KAAK,OAAOC,GAAIJ,EAAKC,IAAKI,MAAOL,EAAKM,KAAMC,SAAU,SAACC,GAAD,OAAWZ,EAAaY,EAAMC,OAAOJ,MAAML,EAAKC,QAC7G,8BACI,kBAAC,IAAD,CAAiBC,UAAU,UAAUQ,KAAK,QAAQC,QAAS,kBAAMhB,EAAWK,EAAKC,gB,eClBjHW,IAAQC,IAAIC,K,IA4EGC,E,kDAxEb,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IAYRuB,kBAAoB,SAACR,GACnB,EAAKS,SAAS,CACZjB,KAAK,CACHM,KAAKE,EAAMC,OAAOJ,MAClBJ,IAAIiB,KAAKC,UAjBI,EAsBnBC,QAAU,SAACZ,GACTA,EAAMa,iBACsB,KAAzB,EAAKC,MAAMtB,KAAKM,MACjB,EAAKW,UAAS,SAACM,GACb,IAAIC,EAAY,GAGhB,OAFAA,EAAcC,OAAOC,OAAO,GAAGH,EAAUC,cAC7BG,KAAK,EAAKL,MAAMtB,MACtB,CAACwB,mBA7BM,EAkCnB7B,WAAa,SAACiC,GACZC,QAAQC,IAAI,YAAYF,GACxB,IAAMG,EAAgB,EAAKT,MAAME,YAAYQ,QAAO,SAAAhC,GAAI,OAAIA,EAAKC,MAAQ2B,KACzE,EAAKX,SAAS,CACZO,YAAYO,KAtCG,EA0CnBnC,aAAe,SAACS,EAAMJ,GACpB,IAAIgC,EAAQ,EAAKX,MAAME,YACvBS,EAAMlC,KAAI,SAACC,GACNA,EAAKC,MAAQA,IACdD,EAAKM,KAAKD,MAGd,EAAKY,SAAS,CACZO,YAAYS,KA/Cd,EAAKX,MAAQ,CACXE,YAAY,GACZxB,KAAK,CACHC,IAAI,GACJK,KAAK,KAPQ,E,qDA0DjB,OACE,yBAAKJ,UAAU,OACb,gCACE,0BAAME,GAAG,WAAW8B,SAAUC,KAAKf,SACjC,2BAAOjB,KAAK,OAAOI,SAAU4B,KAAKnB,kBAAmBX,MAAO8B,KAAKb,MAAMtB,KAAKM,KAAO8B,YAAY,0BAC/F,4BAAQjC,KAAK,UAAb,SAGJ,kBAAC,EAAD,CAAWT,SAAUyC,KAAKb,MAAME,YAAa7B,WAAYwC,KAAKxC,WAAYC,aAAcuC,KAAKvC,oB,GApEnFyC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.6569fea4.chunk.js","sourcesContent":["import React from 'react'\r\nimport './ListItems.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction ListItems(props) {\r\n    const itemlist = props.itemlist;\r\n    const deleteItem = props.deleteItem;\r\n    const OnEditChange = props.OnEditChange;\r\n    // const list = itemlist.map((item) => \r\n    // {\r\n    //     return <div key={item.key}>\r\n    //     <p>{item.text}</p>\r\n    //     </div>  \r\n    // });\r\n    return (\r\n        <FlipMove duration={300} easing=\"ease-in-out\">\r\n            {\r\n                itemlist.map((item) => {\r\n                    return(\r\n                        <div key={item.key} className=\"list\">\r\n                          <p>\r\n                            <input type=\"text\" id={item.key} value={item.text} onChange={(event) => OnEditChange(event.target.value,item.key)} />\r\n                            <span>\r\n                                <FontAwesomeIcon className=\"faicons\" icon=\"trash\" onClick={() => deleteItem(item.key)} />\r\n                            </span>\r\n                          </p>\r\n                          \r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </FlipMove>\r\n    )\r\n}\r\n\r\nexport default ListItems\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport ListItems from './ListItems';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash);\n\nclass App extends Component \n{\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      listOfItems:[],\n      item:{\n        key:'',\n        text:''\n      }\n       \n    }\n  }\n  \n  handleInputChange = (event) => {\n    this.setState({\n      item:{\n        text:event.target.value,\n        key:Date.now()\n      }\n    })\n  }\n\n  addItem = (event) => {\n    event.preventDefault();\n    if(this.state.item.text !== ''){\n      this.setState((prevState) => {\n        let listOfItems=[];\n        listOfItems = Object.assign([],prevState.listOfItems);\n        listOfItems.push(this.state.item);\n        return{listOfItems};\n      })\n    }  \n  }\n\n  deleteItem = (keyToDelete) => {\n    console.log(\"On delete\",keyToDelete);\n    const filteredItems = this.state.listOfItems.filter(item => item.key !== keyToDelete);\n    this.setState({\n      listOfItems:filteredItems\n    })\n  }\n\n  OnEditChange = (value,key) => {\n    let items = this.state.listOfItems\n    items.map((item) => {\n      if(item.key === key){\n        item.text=value;\n      }\n    })\n    this.setState({\n      listOfItems:items\n    })\n\n  }\n\n  render() \n  {\n    //console.log(\"Item is\",this.state.listOfItems);\n    return (\n      <div className=\"App\">\n        <header>\n          <form id=\"todoform\" onSubmit={this.addItem}>\n            <input type=\"text\" onChange={this.handleInputChange} value={this.state.item.text}  placeholder=\"Enter your Note Here!\"></input>\n            <button type=\"submit\">Add</button>\n          </form>\n        </header>\n        <ListItems itemlist={this.state.listOfItems} deleteItem={this.deleteItem} OnEditChange={this.OnEditChange}/>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}